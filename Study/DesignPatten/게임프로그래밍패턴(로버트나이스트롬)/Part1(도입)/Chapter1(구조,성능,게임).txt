1.1 소프트웨어 구조란?
- 얼마나 쉽게 병경할수 있느냐가 코드 설계를 평가하는 척도가 된다.
- 업무할당 > 코드파악 > 문제 해결 코드 작성 > 코드 정리.
- 코드를 보고 머리속으로 큰그림을 그리고 나면 해결책을 찾을수 있다.
- 양쪽 코드가 있는데 한쪽 코드만 봐서는 이해가 가지 않는다면 커플링 되어있다고 봐야됨.
- 작업에 들어가기전에 알아야 할 지식을 줄이는것. 이것이 내가 생각하는 소프트웨어 구조의 핵심목표이다.
- 디커플링 작업은 한쪽을 변경하더라도 다른 한쪽에 영향을 받지 않게 하는것 게임 코드에 미치는 영향이 적다.

1.2 비용은?
- 좋은구조는 생상성을 올려준다.
- 결국... 많은 노력과 원칙이 필요하다... ㅡ.,ㅡ 
- 디커플링과 추상화를 고려해서 만들면 좋겠지만 앞으로 일정이 어떻게 변할지 모르니 예측하기 힘든부분도 있다. 어렵게 만든 코드를 써먹지 
못한다면 코드만 늘어나고 안하느니만 못하다. 결국 수천번씩 코드를 수정하면서 구조 조정에 노력을 ...... 

1.3 성능과 속도
- 유연성이 좋아야 게임을 쉽게 변경할수있다.
- 재미있는 게임을 최적화하는것이 최적화된 게임을 재미있게 만드는 것보다 쉽다.
- 유연한 작업으로 성능에 신경쓰인다면 기획이 확실해진 후에 추상 계층을 제거해 성능을 높이는 방법도 있다.

1.4 나쁜 코드의 장점
- 기획 확인에 필요한 기능만 간신히 돌아가도록 대강 코드를 작성하는 프로토타이핑 기법은 아주 적합한 프로그래밍 실천법이다.
- 프로토타이핑 주의사항이 있다면 버릴코드는 나중에 확실히 버릴수 있게 해야한다. 추후 작업자가 돌아가는 코드라고 사용해서는 안되기
 때문이다 명시해서 다시 만들어야 한다는걸 주지시켜야 한다.

1.5 균형 잡기(코드를 쉽게 이해할수 있도록 깔끔한구조, 성능을 최적화, 최대한 빠르게 구현)
- 윗선의 압박으로 최대한 빨리 밀어 넣다 보면 코드베이스에 꼼수와 버그가 늘고 일관성이 없어져 생상성이 점점 떨어진다.
- 코드를 추가할때마다 구조에 신경써서 만들어야 생상성이 올라간다.. 그만큼 시간과 노력이 필요하다는....

1.6 단순함
- 자료구조와 알고리즘을 먼저 잡아놓고 여기서부터 다른방법을 찾아나간다.
- 코드를 단순하게 유지하면 전체 코드를 줄일수 있고 머리에 담아야 할 코드의 양이 준다.
- 가장 좋은 해결책은 코드를 덧붙이는게 아니라 불필요한 코드를 없애는 것이다.

1.7 마치며
- 추상화와 디커플링을 활용하면 코드를 점차 쉽고 빠르게 만들수있다.
- 고민중인 코드중에 유연함이 필요없다고 확신되면 시간낭비하지말자.
- 코드의 예외처리와 같은 저수준의 핵심 최적화는 최대한 늦게 하라.
- 기획서를 확인하기위해서 빠르게 작업하되 시간에 쫓겨 코드를 엉망으로 만들지 말자. 결국 그 코드로 작업해야 되는 건 우리다.
- 나중에 버릴코드를 잘 만들겠다고 시간낭비하지말라.
- 억지로 하는것보다 만들고 싶은걸 하면서 재미를 느껴보라.

