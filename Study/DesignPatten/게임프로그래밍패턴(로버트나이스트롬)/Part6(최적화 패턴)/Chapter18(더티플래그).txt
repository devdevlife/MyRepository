Chapter18(더티플래그)
18.1 의도
- 불필요한 작업을 피하기위해 실제로 필요할 때까지 작업을 미룬다.

18.2 동기
- 오브젝트 상속구조 : 월드 > 배 > 망대 > 캐릭터 > 새 이렇게 상속된 오브젝트 구조가 있다고 하자 배가 움직이면 월드값에 배의 이동값을 곱하여
  계산된 값을 하위 오브젝트에 모두 적용해 주어야한다 매 프레임마다 로컬이 바뀌든 안바뀌든 행렬 계산이 이루어지고 하위에 모두 동일한 
  불필요한 작업들이 이루어진다 객체에 더티플래그를 추가하여 로컬이 바뀌었을때만 자신의 위치를 업데이트하고 바뀌지 않았다면 그대로 적용하
  고 하위 객체에 넘기자. 불필요한 위치값 행렬계산을 줄이자는 것이다.

18.3 패턴
- 계속해서 변경되는 기본값(로컬)이 있다 파생값은 이 기본값의 비싼 작업을 통해 얻을수 있다 더티 플래그는 기본값의 변경 유무를 확인하는 
  플래그이다 플래그가 켜져있다면 파생값과 기본값을 재계산하고 플래그를 끈다 플래그가 꺼져있다면 파생값을 그대로 하위에 전달한다.

18.4 언제 쓸 것인가? 
- 다른 패턴의 비해 상당히 구체적이다 최적화에 있어서 코드가 복잡해 지는걸 감수하고 성능문제가 심각할때에 사용한다.

18.5 주의사항
- 너무 오래 지연하려면 비용이 든다. ? 무슨말인지 모르겠다 예시는 자동저장기능.
- 상태가 변할 때마다 플래그를 켜야한다(캐시 무효화).
- 이전 파생 값을 메모리에 저장해둬야 한다.

18.6 예제코드
- 생략.

18.7 디자인 결정
- 더티 플래그를 언제 끌 것인가? 
  *결과가 필요할때 : 필요없다면 아예 계산하지 않을수도 있다, 계산 시간이 오래 걸리면 멈춤 현상이 생길 수 있다.
  *미리 정해놓은 지점에서 할 때 : 지연 작업 처리가 플레이 경험에 영향을 주지 않는다, 작업 처리 시점을 수정 할수 없다.
  *백그라운드 처리할 때 : 얼마나 자주 처리할지 조절이 가능, 필요없이 작업을 더 할 수 있다, 비동기 작업을 지원해야 한다.
- 더티 플래그 값 변화를 얼마나 더 세밀하게 관리해야 하나?
  *더 세밀하게 괸리된다면 : 실제로 변경된 데이터만 처리할수 있다.
  *더 듬성듬성하게 관리된다면 : 변경 안되 데이터도 같이 처리될 수 있다, 더티 플레그에 드는 메모리가 줄어든다, 고정 오버헤드 시간을 단축.
