Chapter5(프로토타입)
5.1 프로토타입 디자인패턴
- 상위클래스인 몬스터를 만들고 clone 추상메소드를 넣은후 각각 하위클래스 몬스터 마다 초상메소드를 구현해서 반환해주면 된다.
  그럼 몬스터 종류마다 spawner를 만들필요 없이 하나만 있으면된다.
- spawner 클래스 내부에는 monster 객체가 숨어있다 그럼 해당 몬스터 객체를 도장 찍듯 찍어낼수 있다.
- 하지만 몬스터마다 클래스를 구현해야 하기 때문에 코드양이 주지 않으며 상속관계가 복잡해지면 유지관리 하기 힘들다는것을 프로그래머들은
  잘 알고 있다 그래서 요즘은 컴퍼넌트(14장)나 타입객체(13장)로 모델링하는 것을 선호한다.

5.2 프로토타입 언어 패러다임
- 갈라진 종파처럼 OOP에 대한 정의가 조금씩 다르지만 데이터와코드를 묶어주는 역할을 한다는 점만큼은 모두 동의한다.
- ... 

5.3 데이터 모델링을 위한 프로토타입
- 세월이 지날수록 코드보다 데이터가 차지하는 양이 커지고 있다 게임 데이터가 일정 이상이 되면 코드와 비슷한 기능이 필요하다.
- 프로그래머들은 중복된 코드를 좋아하지 않는다 공간을 낭비하고 제작 시간을 늘린다.
- json 파일에 중복된 부분이 있다면 프로토타입을 추가하여 참조하게 한다.

