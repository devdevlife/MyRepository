Chapter2(명령) / command pattern(명령패턴)
2.1 입력키 변경
- 입력받은 키 이벤트로 함수를 직접적으로 호출하면 키변경에 문제가 생긴다 행동을 실행할수있는 상위클래스를 정의해서 사용.
- 인터페이스에 반환값이 없는 메소드가 하나뿐이라면 명령패턴일 가능성이 크다.

2.2 액터에게 지시하기
- 자식클래스에서 오버로드한 excute 함수를 전역 함수로 호출하면 유연성에 제약을 받는다 직접 찾게하지말고 밖에서 전달해주자.
- 액터(게임객체클래스)를 매개변수로 전달받아 해당 액터의 행동을 호출.
- 어떤 액터를 매개변수로 전달해야될지 모르기때문에 입력핸들러에서 이벤트가 생성시 원하는 동작의 객체를 받환받아 액터를 넘겨주자.
  이렇게 하면 게임중 어떤 액터라도 컨트롤할수 있게된다.
- 일반적으로 유저가 다른캐릭터를 컨트롤할 상황이 생기지 않는다 하지만 AI에 접목시킬때 AI와 액터간의 인터페이스용으로 사용할수도 있다.
- 이렇게 command객체를 AI와 이를 실행하는 액터를 디커플링함으로서 코드가 훨씨 유연해 질수있다.
- 명령객체를 큐나 스트림으로 만들어서 사용해도 좋다.

2.3 실행취소와 재실행
- 명령객체가 어떤 작업을 실행할수 있다면 이를 취소할수 있는 기능도 만들어줘야된다 게임 개발 툴의 필수다.
- undo, redo 함수를 추가하고 명령객체를 스택에 넣어서 현제, 취소, 재실행 을 관리할수 있다.
  실행취소하면 현제 명령을 취소하고 포인터를 뒤로 보낸 후 실행하면 되고 다시 재실행하면 포인트를 다음으로 보낸 후 다시 실행시키면된다
  실행취소 한 뒤 새로운 명령객체가 들어오면 연결되있던 다음명령 객체를 버리고 새로운 명령객체를 추가하여 실행시키면 된다.
  그런데 게임에서 실행취소 재실행을 어디다 쓰지... 유아이 오픈 루트 저장? 백기능에 사용하면 되려나..

2.4 클래스만 좋고 함수형은 별루인가?
- ??

2.5 관련자료
