Chapter6(싱글턴)
6.1 싱글턴 패턴
- 오직 한개의 인스턴스만 갖도록 보장해주는 패턴.
- 전역에서 접근할수 있는 메서드를 제공한다.
- 정적멤버 변수로 인스턴스를 가지고 있고 내부에서만 인스턴스를 생성하고 관리할수 있기때문에 밖에서는 생성할수 없다.

6.2 싱글턴을 왜 사용하는가?
- 한번도 사용하지 않는다면 인스턴스를 생성하지 않는다.
- 런차임에 초기화되므로 다른 싱글턴을 참조해도 괜찮다. 정적멤버는 컴파일타임에 초기화가 되므로 파일로 읽어드린 정보들을 활용할수없다.
- 싱글턴을 상속할수 있다. 
  필요한 기능을 추상 인터페이스를 만든뒤 플렛폼마다 구체클래스를 만들어서 인스턴스 생성시 원하는 구체로 사용하면된다.

6.3 싱글턴이 왜 문제라는 거지?
- 전역변수는 코드를 이해하기 어렵게한다. 해당 인스턴스에 접근하는 코드가 많다고 하자 해당 문제를 일으키는 부분을 모두 확인해야된다.
- 전역변수는 커플링을 조장한다 인스턴스에 대한 접근을 통제함으로써 커플링을 통제할수있다. 
  어떤게 전역변수에 대한 접근을 통제 한다는건지 잘 모르겠음...
- 전연변수는 멀티스레딩같은 멀티성 프로그래밍에 적합하지않다. 교착, 경쟁, 동기화 버그가 발생하기 쉽다.

6.4 대안
- 싱글턴 관리자클래스인 경우가 많다 객체를 관리하는 용도 관리할 필요없이 객체에 기능을 이동시키가 그러면 관리자 클래스가 필요없으며
  오히려 객체지향적인 프로그래밍이된다. 불필요하게 관리자클래스를 만들지 말자.
- 인스턴스를 하나만 생성하고 접근 권한을 주는 방법으로는 필요한 기능을 클래스에 넣고 상속받아서만 사용할수 있게 하면된다.
  그러면 상속받은 서브클래스만 싱글턴 인스턴스에 접근하여 기능을 사용할수있다.

6.5 싱글턴에 남은 것
- 저자는 싱글턴을 사용한 적이 없음. 인스턴스를 하나로 사용하고 싶을때는 정적클래스를 사용하였고 클래스가 같은 인스턴스를 공용으로
  접근할수 있는 방법을 샌드박스 패턴(12장)으로 사용 그리고 객체를 전역으로 접근하되 훨씬 유연하게 설정할수있는 중개자패턴(16장)을 
  사용하였음.

