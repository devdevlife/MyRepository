Chapter3(경량) / 경량패턴
3.1 숲에 들어갈 나무들
- 경량패턴의 목적은 최적화다.
- 나무표현에 들어갈 데이터중에 공통으로 사용할수 있는 부분은 새로운 클래스로 모아서 사용한다.
  공유하는 공유객체는 하나만 있으면 되며 각 나무 인스턴스는 공유객체를 참조하기만 하면된다.

3.2 수천 개의 인스턴스
- 그래픽 카드에서 인스턴스랜더링을 지원한며 유일하게 하드웨어가 지원하는 패턴이기도 하다.
- 두개의 스트림으로 나누어 하나는 공용데이터, 나머지 하나에는 개별 나무 위치등 개별 데이터를 배열로 넣어 보낸후 그리기 호출을 하면된다.

3.3 경량 패턴
- 어떤 객체의 수가 많아서 좀 더 가볍게 만들고 싶을때 사용한다.
- 한개의 고유상태를 다른 객체들에게 공유하므로서 메모리의 사용량을 줄이고있다.

3.4 지형 정보
- 지형의 종류마다 하나의 인스턴스만 생성하고 해당 인스턴스의 주소를 지형 배열에 저장하여 사용.
- 지형을 관리하는 월드클래스는 해당 지역의 정보를 지형정보 인스턴스한 객체에서 바로 접급해 값을 얻어온다.

3.5 성능에 대해서
- 포인터 접근이 열거형보다 느리다고 트집 잡을 만한 요소가 있다. 포인터를 따라가다보면 캐시미스가 발생 성능이 조금 떨어질수있다.
- 최적화의 황금률은 언제가 먼저 측정하는 것이다. 최신 하드웨어는 경량패턴 방식을 써도 열거형을 쓴것과 비교해서 성능이 나빠지지 않았다
  하지만 이건 객체가 메모리를 어떤 식으로 배치되느냐에 따라 달라질수 있다.
- 확실한건 경량패턴을 써서 객체를 늘리지 않고 객체지향적인 프로그램 방식의 장점을 취할수있다. 열거형을 사용해 수많은 다중 선택문을 사용
  할 생각이라면 경량패턴을 고려해보자.

3.6 관련 자료
- 이전에 만들어놓은 객체를 찾을수 있도록 풀(pool)을 관리해야한다. 객체 풀 패턴이 이런데 유용하다.
