Chapter10(업데이트 메서드)
10.1 의도
- 컬렉션에 들어있는 객체들을 한프레임 단위의 작업을 진행하라고 알려줘서 전체를 시뮬레이션 한다??

10.2 동기
- ??

10.3 패턴
- 게임월드는 객체컬렉션을 관리한다 한프레임 단위의 동작을 시뮬레이션 하기 위해 업데이트 메서드를 구현하고 프레임마다 모든 객체를 
  업데이트한다.

10.4 언제 쓸 것인가? 
- 9장의 게임루프가 가장 중요하다면 업데이트 메서드 패턴은 그 다음이다.
- 동시에 동작해야되는 객체나 시스템이 많은경우 사용.
- 각 객체의 동작은 다른객체와 거의 독립적으로 사용되는경우.
- 시간의 흐름에 따라 객체의 시뮬레이션이 필요한 경우.

10.5 주의사항
- 모든 객체가 매 프레임마다 시물레이션되지만 진짜로 동시에 되는 건 아니다.
- 업데이트 중에 객체의 순서를 바꾸는건 조심해야한다.

10.6 예제 코드
- 생략..

10.7 디자인 결정
- 업데이트 메서드를 어디에 둘것인가? 
  개체 클래스 : 개체 클래스에 있다면 다른 클래스를 추가하지 않아도 된다는 점에서 가장 간단한 방법이다
  개체의 종류가 많지 않다면 괜찮지만 요즘 업계에서는 이방식을 서서히 멀리하고 있다 개체 종류가 많으면 새로운 동작을 추가 할때마다 
  개체 클래스를 상속받아야된다면 코드가 망가지기 쉽고 작업하기가 어렵다.
  컴퍼넌트 클래스 : 컴퍼넌트패턴(14장)은 자기가 알아서 업데이트하며 다른 개체의 일부 개체의 다른 부분들과 디커플링한다 곧 알아서 돌아감.
  위임 클래스 : 개체 클래스에 여전히 있지만 가상 함수가 아니며 위임객체에 포워딩만 한다 새로운 동작으로 바꾸고 싶다면 새로운 개체를 
  만들어 위임 객체를 바꾸면 된다 컴퍼넌트와 마찬가지로 새로운 상속 클래스를 바꾸지 않아도 위임할수있다는 유연성을 얻을 수 있다.
- 휴먼 개체를 분리하여 불필요한 cpu소모를 줄인다. 비활성화 개체가 많을수록 컬렉션을 따로 두는것이 좋다.

10.8 관련자료
- 생략

*유니티 모노비헤이비어를 상속받는 클래스는 업데이트 메서드 패턴을 쓰고있다.


