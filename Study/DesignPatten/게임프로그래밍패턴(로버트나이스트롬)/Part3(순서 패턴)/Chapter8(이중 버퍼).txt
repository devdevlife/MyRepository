Chapter8(이중 버퍼)
8.1 의도
- 여러 순차 작업의 결과를 한번에 보여준다.

8.2 동기
- 간단히 컴퓨터 그래픽스 작동원리를 설명.
  화면의 픽셀은 좌측상단에서 우측하단으로 한 픽셀씩 화면에 뿌리는데 한번 뿌리는 과정을 1프레임이라 하며 보통 못해도 1초에 60프레임을 
  화면에 뿌린다 각 프레임의 컬러값및 정보를 메모리에 넣어서 전달하는데 바로 프레임버퍼에 넣어서 전달함(램의 한 부분) 비디오 디스플레이가
  이 프레임버퍼로부터 한 바이트씩 색깔을 읽어오는데 버퍼 기록과 별개로 작동을 하기때문에 기록하는 속도보다 읽어오는 속도가 빠르다면 
  테어링이 발생할수있다 이중 버퍼 패턴이 이 문제를 어떻게 해결하는지 알아보자. 
- 이런 문제를 해결하기 위해 이중버퍼를 사용 A, B 버퍼 두개를 사용하여 A버퍼에 픽셀정보를 넣고 읽는동안 B버퍼에 그 다음 픽셀정보를 입력
  해 놓는것 그러면 A버퍼를 모두 사용하고 버퍼를 교체하여 B버퍼를 읽는동안 다시 A버퍼에 기록하는 방법이다.
  버퍼 교체를 화면이 깜박이는 시점에 맞춰서 버퍼를 교체하기때문에 테어링은 더이상 생기지 않고 전체 장면에 한번에 나타나게된다.

8.3 패턴
- 버퍼클래스는 변경이 가능한 상태인 버퍼를 캡슐화 하여 현제버퍼와 다음버퍼를 가지고 있게 하고 읽어드릴때는 현제버퍼에서 기록할때는 
  다음버퍼에서 접근하도록 하게 하며 변경이 끝나면 현제버퍼와 다음버퍼를 교체해 다음버퍼가 보여지게한다.

8.4 언제 쓸 것인가?
- 순차적으로 변경되어야되는 상태가 있을경우. 이 상태는 변경중에도 접근이 가능해야 될 경우.
- 바깥코드에서는 작업 중인 상태에 접근할 수 없어야 한다.
- 상태에 값을 쓰는 도중에도 기다리지 않고 바로 접근할 수 있어야 한다.
- 뭔말인지 모르겠다...

8.5 주의 사항
- 이중 버퍼에 값을 쓰는것보다 교체 시간이 더 오래 걸린다면 아무런 도움이 안된다. 또한 교체중에는 버퍼 모두에 접근할 수 없어야 한다.
- 메모리가 이중으로 사용된다 메모리에 민감한 프로젝트라면 이중버퍼패턴을 포기하고 상태에 접근하는 동안 밖에서 접근하지 못하게 할 
  방법을 찾아야한다.

8.6 예제 코드
- 코드 패스.
- 그럼 그래픽스 외에 어떤 경우에 사용하면 되는가? 물리나 인공지능같이 서로 상호작용할때 사용하면 좋다.

8.7 디자인 결정
- 버퍼포인터나 레퍼런스를 교체할것.
- 외부에서 포인터 접근으로 인해 잘못된 포인터를 가르킬수있고 그로인해 시스템적인 문제가 발생할수있다.
- 버퍼가 한 덩어리라면 포인터만 교체해주면 되지만 객체가 각각 들고있다면 객체마다 순회하면서 교체해줘야된다 이런경우 현제와 다음버퍼의
  인덱스를 정적으로 사용하면 한번 교체로 모든 객체의 버퍼 위치를 바꿀수 있다. 버퍼는 배열[2] 현제와 다음 인뎃스는 정적으로관리.

8.8 관련 자료
- 이중버퍼 패턴은 그래픽관련 모든 api에서 사용된다. OpenGL > SwapBuffer, DirectX3D > swap chain, MSXNA > endDraw 등이 있다.

