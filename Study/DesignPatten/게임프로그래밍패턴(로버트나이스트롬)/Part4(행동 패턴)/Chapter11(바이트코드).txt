Chapter11(바이트코드)
11.1 의도
- 가상 머신 명령어를 인코딩한 데이터로 행동을 표현할수있는 유연함을 제공한다.

11.2 동기 
- 게임 최적화도 중요하지만 재미가 빠질수 없다 재미있는 게임을 만들려면 반복된 개발이 지속되어야되며 밸런스도 잘 맞아야 한다.
  이 과정에 필요한 빌드시간은 정말 중요하다
- 인코딩한 데이터로 몬스터 객체가 돌아가지 않는다면 마법이 바뀔때마다 프로그래머들은 코드를 수정해야 하며 버그가 생길때만다 빌드를 
  돌려 업데이트를 돌려 게임을 패치 해야된다 아주 치명적이다.
- 유저가 마법사의 마법을 만들수있게 하고 싶다면? 모드를 지원해야된다면? 
- 행동을 데이터 파일에 따로 정의해 놓고 읽어서 실행할수만 있다면 앞서 말한 모든 목표를 달성할 수 있다.
- 가상기계어(virtual machine), 가상기계어를 실행하는 가상 바이너리 기계어를 바이트코드 라고 부르겠다.

11.3 패턴
- 명령어 집합을 실행시키는 저수준 작업을 정의.
- 명령어는 일련의 바이트로 인코딩된다.
- 가상머신은 중간값들을 스택에 저장해 가면서 명령어를 하나씩 실행.
- 명령어들을 조합함으로서 복잡한 고수준 언어를 정의할수 있다.

11.4 언제 쓸 것인가?
- 정의할 행동은 많은데 다음과 같은 이유로 구현하기 어려울때 사용.
  *언어가 너무 저수준이라 구현하기도 어렵고 오류가 생기기 쉽다
  *컴파일 시간이나 다른 빌드환경때문에 반복 개발이 너무 오래 걸린다
  *보안에 취약하다 정의하려는 행동이 게임을 깨먹지 않게 하기위해서 코드로부터 격리가 필요하다

- 어떤 패턴들 보다 가장 복잡하고 쉽게 적용하기 어렵다.
- 당연히 네이티브코드 보다 느리므로 성능에 민감한 곳에는 적합하지 않다.

11.5 주의사항
- 프론트엔드가 필요할것이다.
- 디버거가 그리울 것이다.

11.6 예제코드
- 생략.. 이걸 요즘도 사용하는지 모르겠다... 효율성이 떨어져보이는데..

11.7 디자인 결정
- 나머지 생략.. 필요읍다..
