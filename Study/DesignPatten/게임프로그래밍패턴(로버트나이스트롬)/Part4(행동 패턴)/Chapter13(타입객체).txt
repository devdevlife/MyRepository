Chapter13(타입객체)
13.1 의도
- 클래스 하나를 인스턴스별로 다른 객체형으로 표현 할수 있게 만들어 새로운 클래스들을 유연하게 만들 수 있다.. ?

13.2 동기
- 각종 몬스터를 만든다고 해보자 상위클래스 몬스터를 만들어 각종 하위몬스터들을 만들어 낼것이다 각 하위몬스터클래스 생성자에서 각종 
  몬스터 수치를 등록해서 생성자를 호출하자 기획의 몬스터 수치가 달라질때마다 수정 빌드 테스트 과정을 반복하는 데이터멍키가 되어있는
  모습을 보게된다 종족 상태를 코드를 변경하지 않아도 수정되되록 해야한다.
- 몬스터 클래스는 하나만 사용하고 breed(타입객체)를 참조하게 한다. 타입객체는 몬스터 타입별로 정보를 가지고 있다 설정 파일로 읽은 
  데이터를 런타임에 타입에 맞게 인스턴스를 생성할 수 있다 이러므로서 코드를 수정하지 않고도 기획 의도에 맞게 설정 파일 수정으로 몬스터
  의 수치를 적용시킬 수 있다.

13.3 패턴
- 타입객체 클래스와 타입객체 사용 클래스를 나누어 정의한다 타입객체 사용 클래스는 서로 다른 인스턴스를 가지고 있으며 해당 타입의 정보는
  타입객체클래스를 참조하게하여 자신의 타입에 맞는 정보를 공유하여 사용한다. 이렇게 사용하면 상속 처리를 하드코딩 하지 않고도 마치 
  상속받은 것처럼 비슷한 객체끼리 데이터나 동작을 공유할수 있다.

13.4 언제 쓸 것인가?
- 타입의 종류가 많고 나중에 어떤 타입이 추가될지 모르는경우.
- 컴파일이나 코드 변경 없이 타입정보를 수정하거나 새로운 타입을 추가 하고 싶은 경우.

13.5 주의사항
- 타입별 동작 구현이 어렵다. 11장의 바이트코드 패턴을 사용하면 됨. 별도의 스킬플레이어를 만들어 관리해도 될듯.

13.6 예제코드
- 코드 생략.
- 타입객체사용 클래스 생성자에서 타입객체를 받아서 생성해도 되겠지만 타입개체에서 생성자함수를 통해 타입객체사용 클래스를 만들어 내는
  것도 좋다 이렇게 사용하게 되면 객체 풀 패턴(19장)을 사용하여 객체를 재활용 할수있다.
- 상속으로 데이터를공유할수 있다 타입객체에 parent 기능을 넣어서 부모 타입객체를 참조하여 수치값을 설정한다.

13.7 디자인 결정
- 타입객체를 숨길것인가 노출할것인가.
- 타입사용객체를 어떤 방법으로 생성할 것인가.
- 타입 변경이 가능하게 할것인가.
- 상속을 지원하게 할것인가. 다중상속을 사용하지 말자.

