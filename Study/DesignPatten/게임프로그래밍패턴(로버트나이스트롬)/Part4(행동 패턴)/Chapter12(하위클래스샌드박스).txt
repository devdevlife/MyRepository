Chapter12(하위클래스샌드박스)
12.1 의도
- 상위클래스에서 지원하는 기능들을 통해서 하위 클래스에서 행동들을 재정의한다.
- 뭐지. 오버라이딩인가?

12.2 동기
- 초능력자들이 많은 게임을 만든다고 생각해보자 상위클래스(SuperPower) 클래스에 고통적인 기능들을 잔득 집어넣고 상속받아 
  초능력자들을 만들것이다 이렇게 사용하다 보면 상위클래스에 온갖 기능들이 붙어나갈것이다.
  *중복 코드가 많아진다.
  *거의 모든 게임코드가 초능력클래스와 커플링된다.
  *외부시스템이 변경되면 초능력클래스가 깨질 가능성이 크다.
  *모든 초능력클래스가 지켜야 할 불변식을 정의하기 어렵다.
- 사운드및 파티클은 별도의 관리클래스를 만들어 호출하게 하고 원시명령은 protected 접근제한자(비가상함수)로 두어 자식 클래스 전용이라는
  것을 명시한다. 이렇게 원시명령을 만들고나면 사용할 공간을 제공해야된다 이를 위해 하위클래스에서 구현해야하는 protected 순수가상함수
  를 만드어 초능력 클래스에서 구현하게 한다.
  1.상위클래스를 상속받아 새로운 초능력클래스를 만든다.
  2.샌드박스 메서드인 activate() 오버라이딩한다.
  3.슈퍼클래스가 제공하는 protected 메서드를 호출하여 activate()를 구현한다.
- 여러 슈퍼클래스에서 중복되는 코드가 있다면 언제든지 슈퍼클래스로 옮겨서 재사용할수있게 사용하면된다.

12.3 패턴
- 상위 클래스는 추상클래스 샌드박스 메서드와 제공기능을 protected로 만들어 하위클래스용이라는걸 분명히 한다.
  하위 클래스는 샌드박스용 추상 메서드를 제공기능을 활용해 구현한다.

12.4 언제 쓸 것인가?
- 클래스 하나에 하위클래스가 많은 경우.
- 상위클래스는 하위클래스에 필요한 기능을 모두제공할수 있다.
- 하위클래스 행동 중에 겹치는게 많아서 하위 클래스들끼리 공유하고 싶을때.
- 하위클래스들 끼리의 커플링을 최소화 하고 싶을때.

12.5 주의사항
- 필요한 공통기능을 상위클래스에 추가하다보면 코드의 양이 늘어나고 하위클래스와의 커플링이 발생 상위클래스가 조그만 바뀌어도 
  어딘가가 깨지기가 쉽다 소위 깨지기 쉬운 상위 클래스 문제에 빠지게된다.
  이런 경우 상위클래스의 기능들을 클래스로 뽑아서 책임을 나눠갖게 하는게 좋다 컴퍼넌트 패턴(14장).

12.6 예제코드
- 생략.

12.7 디자인 결정
- 제공하는 기능이 몇 안되는 하위클래스에서 사용 안된다면 차라리 하위클래스에 두는게 더 간단하고 명확할 수 있다.
- 다른 시스템의 함수를 호출할때에도 그 함수의 상태를 변경하지 않는다면 안전한 커플링으로 크게 문제가 되지 않지만 그 함수의 상태를 
  변경한다면 그 시스템과 더 강한 커플링임을 암시 할수 있게 상위 클래스로 제공하는것이 좋다. 
- 상위 클래스의 제공기능을 클래스화 하여 별도로 분리하여 사용하면 상위클래스의 메서드를 줄일수 있고 유지보수가 쉽우며 상위클래스와 
  하위 클래스의 커플링을 안화 시킬수 있다. 예를 들어 사운드연출을 상위클래스에 두지 않고 캡슐화하여 별도의 클래스로 관리한다면 훨신 
  유지관리도 쉽고 상위클래스에 영향도 주지 않는다.
