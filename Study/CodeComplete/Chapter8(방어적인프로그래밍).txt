*Chapter8-방어적인프로그래밍
8.1 타당하지 입력으로부터 프로그램의 보호
	- 외부로 부터 들어오는 모든 데이터의 값을 검사한다.
	- 잘못된 입력을 어떻게 처리할지 결정하라.
8.2 어설션
	- 예상되는 오류상황, 절대로 발생해서는 안되는 상황들에 사용하라.
8.3 오류 처리 기법
	- 상황에 맞게 반환(대체, 최근값, 종료 등등..).
	- 경고 메세지를 파일에 기록하라(비공개 자료는 암호화).
	- 방어적인 프로그래밍의 핵심은 오류가 없을거라고 생각하더라도 함수의 리턴값을 체크하여 여러분의 예상치 못한 오류로부터 보호하는것이다.
8.4 예외
	- 라이브러리 코드가 던지는 예외를 파악하라.
	- 예외의 사용을 규격화하라(Exception 기본 클래스르 파생하여 사용).
8.5 오류에 의해서 발생하는 손해를 막기 위한 방책
	- 인터페이스를 사용하여 안전한 지역의 경계를 지나는 데이터들의 타당성을 검사(신뢰할수 없는 데이타 > 필터링 클래스를 통해 데이터 정리 > 신뢰할수 있는 데이터).
	- 입력 시에 입력 데이터를 적절한 형으로 변환하라.
	- 방책을 사용하여 어셜션과 오류 처리를 확실하게 구별한다.
8.6 디버깅 보조 도구
	- 제약사항드을 개발버전에 무의식적으로 적용시키지 않는다.
	- 상업 목적의 코드에는 디버깅 보조 도구가 들어가면 안되므로 개발버전에서만 사용될수 있도록 빌드 과정을 설계하라.
	- 기본적으로 제공하는 전처리기를 사용할.(define)
8.7 제품 코드안에 남겨야 할 방어적인 프로그래밍 코드 정하기
	- 중요한 오류검사 코드는 남겨 놓아라.
	- 사소한 오류검사는 제거.
	- 데이터 손실을 야기할 수 있는 디버깅 코드는 제품 코드에서 제거한다.
8.8 방어적인 프로그래밍에 대해서 방어적이 되는것
	- 